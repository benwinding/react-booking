{"version":3,"sources":["logo.svg","components/appointment.component.js","components/mock.js","components/tab.component.js","components/widget.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AppointmentComponent","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","selectedSlot","handleDatepicker","bind","assertThisInitialized","inherits","createClass","key","value","date","setState","startDate","slot","_this2","campaign","react_default","a","createElement","es","inline","selectsStart","selected","includeDates","events","map","i","Date","onChange","className","find","x","moment","format","slots","onClick","handleSeletctedSlot","id","from","to","cla","Component","title","description","getMockData","_getMockData","apply","arguments","_callee","regenerator_default","wrap","_context","prev","next","abrupt","stop","TabComponent","WidgetComponent","loaded","form","fullname","email","phone","address","zipCode","_componentDidMount","asyncToGenerator","mark","sent","tab_component_TabComponent","react_router_dom","react_router","path","exact","component","appointment_component_AppointmentComponent","App","widget_component_WidgetComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95a35d8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport moment from 'moment';\r\n\r\nexport class AppointmentComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: null,\r\n      selectedSlot: null\r\n    };\r\n    this.handleDatepicker = this.handleDatepicker.bind(this);\r\n  }\r\n\r\n  handleDatepicker(date) {\r\n    this.setState({\r\n      startDate: date\r\n    });\r\n  }\r\n\r\n  handleSeletctedSlot(slot) {\r\n    this.setState({\r\n      selectedSlot: slot\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { campaign } = this.props;\r\n    return (\r\n      <div>\r\n        <DatePicker\r\n          inline\r\n          selectsStart\r\n          selected={this.state.startDate}\r\n          includeDates={campaign.events.map(i => new Date(i.date))}\r\n          onChange={this.handleDatepicker}\r\n        />\r\n        {this.state.startDate && (\r\n          <div>\r\n            <h3>Active appointments</h3>\r\n\r\n            <div className=\"appointments\">\r\n              {campaign.events\r\n                .find(\r\n                  x =>\r\n                    x.date === moment(this.state.startDate).format('YYYY-MM-DD')\r\n                )\r\n                .slots.map(i => {\r\n                  return (\r\n                    <div\r\n                      onClick={() => this.handleSeletctedSlot(i.id)}\r\n                      key={i.id}\r\n                      className={\r\n                        this.state.selectedSlot === i.id\r\n                          ? 'appointment selected'\r\n                          : 'appointment'\r\n                      }\r\n                    >\r\n                      <div className=\"appointment-time\">\r\n                        <span>{i.from}</span> - <span>{i.to}</span>\r\n                      </div>\r\n                      <div className=\"appointment-confirm\">\r\n                        <button cla>Confirm</button>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { async } from 'q';\r\n\r\nconst data = {\r\n  title: 'Campaing number 1',\r\n  description:\r\n    'Lorem Ipsum is simply dummy text of the printing and typesetting industry ...',\r\n  events: [\r\n    {\r\n      date: '2019-07-26',\r\n      slots: [\r\n        {\r\n          id: 1,\r\n          from: '12:00',\r\n          to: '13:00'\r\n        },\r\n        {\r\n          id: 2,\r\n          from: '14:00',\r\n          to: '15:00'\r\n        },\r\n        {\r\n          id: 3,\r\n          from: '16:00',\r\n          to: '17:00'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      date: '2019-07-27',\r\n      slots: [\r\n        {\r\n          id: 4,\r\n          from: '12:30',\r\n          to: '13:30'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      date: '2019-07-28',\r\n      slots: [\r\n        {\r\n          id: 5,\r\n          from: '12:45',\r\n          to: '13:45'\r\n        },\r\n        {\r\n          id: 6,\r\n          from: '16:45',\r\n          to: '17:45'\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      date: '2019-07-29',\r\n      slots: [\r\n        {\r\n          id: 7,\r\n          from: '12:15',\r\n          to: '13:15'\r\n        },\r\n        {\r\n          id: 8,\r\n          from: '14:15',\r\n          to: '15:15'\r\n        },\r\n        {\r\n          id: 9,\r\n          from: '16:15',\r\n          to: '17:15'\r\n        },\r\n        {\r\n          id: 10,\r\n          from: '18:15',\r\n          to: '19:15'\r\n        },\r\n        {\r\n          id: 11,\r\n          from: '20:15',\r\n          to: '21:15'\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n};\r\n\r\nexport async function getMockData() {\r\n  return data;\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport class TabComponent extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"navigation-path\">\r\n        <ul>\r\n          <li className=\"active\">\r\n            <i className=\"icon icon-calendar\" />\r\n            <span>Select Calendar</span>\r\n          </li>\r\n          <li className=\"active\">\r\n            <i className=\"icon icon-user\" />\r\n            <span>Personel Information</span>\r\n          </li>\r\n          <li>\r\n            <i className=\"icon icon-credit-card\" />\r\n            <span>Payment Page</span>\r\n          </li>\r\n          <li>\r\n            <i className=\"icon icon-award\" />\r\n            <span>Final Status</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { AppointmentComponent } from './appointment.component';\r\nimport { getMockData } from './mock';\r\nimport { TabComponent } from './tab.component';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\nexport class WidgetComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      campaign: null,\r\n      loaded: false,\r\n      form: {\r\n        fullname: null,\r\n        email: null,\r\n        phone: null,\r\n        address: null,\r\n        zipCode: null\r\n      }\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const data = await getMockData();\r\n    this.setState({\r\n      campaign: data,\r\n      loaded: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { campaign } = this.state;\r\n    return this.state.loaded === true ? (\r\n      <div className=\"campagin-wrapper\">\r\n        <TabComponent />\r\n        <div>\r\n          <h1>{campaign.title}</h1>\r\n          <p>{campaign.description}</p>\r\n        </div>\r\n        <Router>\r\n          <Route\r\n            path=\"/\"\r\n            exact\r\n            component={() => <AppointmentComponent campaign={campaign} />}\r\n          />\r\n        </Router>\r\n      </div>\r\n    ) : (\r\n      <div>Please wait we are getting data from our servers ...</div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport { WidgetComponent } from './components/widget.component';\n\nfunction App() {\n  return <WidgetComponent />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}